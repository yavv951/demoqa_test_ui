{"name": "test_form_registration_student[my_photo.jpg]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nfrom disconnected: received Inspector.detached event\n  (Session info: chrome=102.0.5005.61)\nStacktrace:\n#0 0x55b8b7c17f33 <unknown>\n#1 0x55b8b7962118 <unknown>\n#2 0x55b8b794dff5 <unknown>\n#3 0x55b8b794da55 <unknown>\n#4 0x55b8b794cf15 <unknown>\n#5 0x55b8b794bc0f <unknown>\n#6 0x55b8b794c19c <unknown>\n#7 0x55b8b795bba5 <unknown>\n#8 0x55b8b794d7a6 <unknown>\n#9 0x55b8b794e6bb <unknown>\n#10 0x55b8b794da72 <unknown>\n#11 0x55b8b794cf15 <unknown>\n#12 0x55b8b794bc0f <unknown>\n#13 0x55b8b794c042 <unknown>\n#14 0x55b8b7963b92 <unknown>\n#15 0x55b8b79c9a3f <unknown>\n#16 0x55b8b79b5f72 <unknown>\n#17 0x55b8b79c92e4 <unknown>\n#18 0x55b8b79b5e63 <unknown>\n#19 0x55b8b798b82a <unknown>\n#20 0x55b8b798c985 <unknown>\n#21 0x55b8b7c5c4cd <unknown>\n#22 0x55b8b7c605ec <unknown>\n#23 0x55b8b7c4671e <unknown>\n#24 0x55b8b7c61238 <unknown>\n#25 0x55b8b7c3b870 <unknown>\n#26 0x55b8b7c7d608 <unknown>\n#27 0x55b8b7c7d788 <unknown>\n#28 0x55b8b7c97f1d <unknown>\n#29 0x7faee6868609 <unknown>", "trace": "request = <SubRequest 'app' for <Function test_form_registration_student[my_photo.jpg]>>\nsetup_browser = <generator object setup_browser at 0x7fa9db983a50>\n\n    @pytest.fixture\n    def app(request, setup_browser):\n        base_url = request.config.getoption(\"--base-url\")\n>       browser.open_url(base_url).driver.set_window_size(width=1980, height=1280)\n\nconftest.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/demoaq_test/lib/python3.8/site-packages/selene/support/shared/browser.py:204: in open_url\n    return self.open(absolute_or_relative_url)\n../../../.virtualenvs/demoaq_test/lib/python3.8/site-packages/selene/support/shared/browser.py:78: in open\n    self.config.get_or_create_driver().get(url)\n../../../.virtualenvs/demoaq_test/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:442: in get\n    self.execute(Command.GET, {'url': url})\n../../../.virtualenvs/demoaq_test/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa9db964040>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\...\\\\n#27 0x55b8b7c7d788 \\\\u003Cunknown>\\\\n#28 0x55b8b7c97f1d \\\\u003Cunknown>\\\\n#29 0x7faee6868609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from disconnected: received Inspector.detached event\nE         (Session info: chrome=102.0.5005.61)\nE       Stacktrace:\nE       #0 0x55b8b7c17f33 <unknown>\nE       #1 0x55b8b7962118 <unknown>\nE       #2 0x55b8b794dff5 <unknown>\nE       #3 0x55b8b794da55 <unknown>\nE       #4 0x55b8b794cf15 <unknown>\nE       #5 0x55b8b794bc0f <unknown>\nE       #6 0x55b8b794c19c <unknown>\nE       #7 0x55b8b795bba5 <unknown>\nE       #8 0x55b8b794d7a6 <unknown>\nE       #9 0x55b8b794e6bb <unknown>\nE       #10 0x55b8b794da72 <unknown>\nE       #11 0x55b8b794cf15 <unknown>\nE       #12 0x55b8b794bc0f <unknown>\nE       #13 0x55b8b794c042 <unknown>\nE       #14 0x55b8b7963b92 <unknown>\nE       #15 0x55b8b79c9a3f <unknown>\nE       #16 0x55b8b79b5f72 <unknown>\nE       #17 0x55b8b79c92e4 <unknown>\nE       #18 0x55b8b79b5e63 <unknown>\nE       #19 0x55b8b798b82a <unknown>\nE       #20 0x55b8b798c985 <unknown>\nE       #21 0x55b8b7c5c4cd <unknown>\nE       #22 0x55b8b7c605ec <unknown>\nE       #23 0x55b8b7c4671e <unknown>\nE       #24 0x55b8b7c61238 <unknown>\nE       #25 0x55b8b7c3b870 <unknown>\nE       #26 0x55b8b7c7d608 <unknown>\nE       #27 0x55b8b7c7d788 <unknown>\nE       #28 0x55b8b7c97f1d <unknown>\nE       #29 0x7faee6868609 <unknown>\n\n../../../.virtualenvs/demoaq_test/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException"}, "attachments": [{"name": "log", "source": "f14fef4c-89b3-438b-aa35-d25d34138f6a-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "5084604c-b8e9-4454-b65e-6eb67f95c8a4-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "115bea43-e69b-4e69-98c0-c65ebdc704da-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "image_file", "value": "'my_photo.jpg'"}], "start": 1659391854703, "stop": 1659391854703, "uuid": "4310145e-394b-490a-8490-5749eb6ff3e3", "historyId": "d65d6fceeb15a183421f7f837e73caad", "testCaseId": "85ff173fe99f6e7515f2089c8ca399a3", "fullName": "tests.test_practice_form.TestPracticeFormPage#test_form_registration_student", "labels": [{"name": "tag", "value": "WEB UI"}, {"name": "feature", "value": "Testing site qa guru with selene"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "Тест кейс 0001 Регистрация студента"}, {"name": "Owner", "value": "Vadim"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_practice_form"}, {"name": "subSuite", "value": "TestPracticeFormPage"}, {"name": "host", "value": "user-HP-ProBook-430-G7"}, {"name": "thread", "value": "88378-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_practice_form"}], "links": [{"type": "link", "url": "https://github.com/yavv951", "name": "Owner"}]}